#!/usr/bin/env python3
# seed.py

import os
import random
from datetime import date, timedelta

# make sure your FIREBASE creds are found, e.g.
# export GOOGLE_APPLICATION_CREDENTIALS="path/to/serviceAccountKey.json"
from passlib.context import CryptContext

from data.user_dao import get_user_by_email, create_user
from data.transaction_dao import batch_create
from data.relation_dao import create_relation
from models.transaction import TransactionIn

pwd_ctx = CryptContext(schemes=["bcrypt"], deprecated="auto")

def main():
    # 1) Create or fetch test users
    test_users = [
        {"email": "alice@example.com", "password": "alicepwd"},
        {"email": "bob@example.com",   "password": "bobpwd"},
    ]

    seeded_users = []
    for u in test_users:
        existing = get_user_by_email(u["email"])
        if existing:
            print(f"[SKIP] user exists: {u['email']} ({existing['id']})")
            seeded_users.append(existing)
        else:
            hashed = pwd_ctx.hash(u["password"])
            new_u = create_user(u["email"], hashed)
            print(f"[CREATED] user: {u['email']} ({new_u['id']})")
            seeded_users.append(new_u)

    # 2) Create 5 random txns per user
    all_txn_ids = {}
    for user in seeded_users:
        txns = []
        for i in range(5):
            txn_date = date.today() - timedelta(days=5 - i)
            amt = round(random.uniform(10, 200), 2)
            if random.choice([True, False]):
                deposit, withdrawn, ttype = amt, 0.0, "credit"
            else:
                deposit, withdrawn, ttype = 0.0, amt, "debit"

            txns.append(
                TransactionIn(
                    user_id=user["id"],
                    date=txn_date,
                    narration=f"Seed txn #{i+1} for {user['email']}",
                    withdrawn=withdrawn,
                    deposit=deposit,
                    type=ttype,
                    tags=["seed", "test"],
                    remarks="automated seed data",
                    processed=True,
                )
            )

        ids = batch_create(txns)
        print(f"[CREATED] {len(ids)} txns for {user['email']}: {ids}")
        all_txn_ids[user["id"]] = ids

    # 3) Create one relation per user grouping their txns
    for user in seeded_users:
        ids = all_txn_ids[user["id"]]
        rel = create_relation({
            "user_id": user["id"],
            "primary_transaction": ids[0],
            "related_transactions": ids,
            "settlement_notes": "auto-generated by seed script"
        })
        print(f"[CREATED] relation for {user['email']}: {rel['id']}")

if __name__ == "__main__":
    main()